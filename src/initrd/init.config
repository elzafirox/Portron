#!/bin/sh


# loadfixedconfig $1 = MNTISO $2=DEVICE

loadfixedconfig() {

    enableopenssl

    MNTISO=${1}
    DEVICE=${2}
    VARRUN=/union/var/run
    CONFD=${VARRUN}/conf.d

    [ -d ${CONFD} ] || mkdir -p ${CONFD}
    echo "/dev/${DEVICE}" > ${CONFD}/VAR_BOOT

    # MAC determines installation settings folder and encryption key
    MAC=`ifconfig -a | grep HWaddr | head -n1 | cut -s -d: -f3- | tr ':' '-' | cut -c 1-14`

    if [ -d ${MNTISO} ]; then

        confile=${MNTISO}/conf/${MAC}

        if [ -f ${confile} ]; then

            logme "- loading config for ${MAC} in ${1}"
            K2="${MAC}.RLP"

            echo "${K2}" | openssl aes-256-cbc -a -d -in ${confile} -out /tmp/config.tgz -pass stdin
            if [ $? -eq 0 ]; then

                # unencryption OK
                if [ -f /tmp/config.tgz ]; then
                    cd ${CONFD}
                    tar zxf /tmp/config.tgz .
                    rm -f /tmp/config.tgz
                    touch ${VARRUN}/portron.config.sgn
                fi

            else

                # pendrive in another computer (fails MAC)

                logme "- the installation is for another computer" ${RED}
                touch  ${VARRUN}/portron.config.tamper

            fi

        else

            #
            # sgx exists, but no dat exists
            #

            logme "- no custom config exists"
            touch ${VARRUN}/portron.config.none

        fi

    else
        logme "- failed to find iso in ${MNTISO}" ${RED}
    fi

}

get_config() {
    [ -d ${CONFD} ] && {
        cd ${CONFD}
        for a in `ls -1 ${1}* 2>/dev/null`; do
            export ${a}="`cat ${a}`"
            logme "- loading ${a}"
        done
    }
}

processprivilegedconfig() {

    get_config SYS

    [ "$SYS_SSH_PASS" ] && {

        setuserpassword root "${SYS_SSH_PASS}"
        touch /union/var/run/portron.ssh

    }

    rm -f ${CONFD}/SYS* 2>/dev/null

}

hasKernel() {
    cat /proc/cmdline | grep $1
}

expKernel() {
   val=`hasKernel $1`
   fil="${VARRUN}/portron.kp.$1"

   [ "${val}" ] && {
        touch ${fil}
        logme "- enabling kp $1"
   } || {
        rm -f ${fil}
   }
}


exportkernelparams() {
    expKernel disnet
    expKernel reqnet
    expKernel dispers
    expKernel reqpers
    expKernel debug
    expKernel initrd_debug
}

